%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.3
-module(game_login_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_ErrCode/1, enum_value_by_symbol_ErrCode/1]).
-export([enum_symbol_by_value_LogType/1, enum_value_by_symbol_LogType/1]).
-export([enum_symbol_by_value_GateType/1, enum_value_by_symbol_GateType/1]).
-export([enum_symbol_by_value_OutType/1, enum_value_by_symbol_OutType/1]).
-export([enum_symbol_by_value_PropType/1, enum_value_by_symbol_PropType/1]).
-export([enum_symbol_by_value_PayWay/1, enum_value_by_symbol_PayWay/1]).
-export([enum_symbol_by_value_ShopStatus/1, enum_value_by_symbol_ShopStatus/1]).
-export([enum_symbol_by_value_LoginPrizeType/1, enum_value_by_symbol_LoginPrizeType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("game_login_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ErrCode'() :: 'OK' | 'RegistFailed' | 'LoginFailed' | 'PropNotEnough' | 'GateUnreachable' | 'EnergyNotEnough' | 'CoinNotEnough' | 'DiamondNotEnough' | 'AlreadyAward' | 'AwardFailed' | 'OrderFailed' | 'Failed' | 'WSGetFailed' | 'WSLoginFailed' | 'SetShopFailed' | 'SetPropFailed' | 'SetPrizeFailed' | 'SetGateFailed' | 'EnergyEnough'.
-type 'LogType'() :: 'LOG_TYPE0' | 'LOG_TYPE1' | 'LOG_TYPE2' | 'LOG_TYPE3' | 'LOG_TYPE4' | 'LOG_TYPE5'.
-type 'GateType'() :: 'GATE_TYPE0' | 'GATE_TYPE1' | 'GATE_TYPE2'.
-type 'OutType'() :: 'OUT_TYPE0' | 'OUT_TYPE1' | 'OUT_TYPE2'.
-type 'PropType'() :: 'PROP_TYPE0' | 'PROP_TYPE1' | 'PROP_TYPE2' | 'PROP_TYPE3' | 'PROP_TYPE4' | 'PROP_TYPE5' | 'PROP_TYPE6' | 'PROP_TYPE7' | 'PROP_TYPE8' | 'PROP_TYPE9' | 'PROP_TYPE10' | 'PROP_TYPE11' | 'PROP_TYPE12' | 'PROP_TYPE13' | 'PROP_TYPE14'.
-type 'PayWay'() :: 'PAY_WAY0' | 'PAY_WAY1' | 'PAY_WAY2'.
-type 'ShopStatus'() :: 'SHOP_STATUS0' | 'SHOP_STATUS1' | 'SHOP_STATUS2' | 'SHOP_STATUS3' | 'SHOP_STATUS4'.
-type 'LoginPrizeType'() :: 'LoginPrizeSelect' | 'LoginPrizeDraw'.
-export_type(['ErrCode'/0, 'LogType'/0, 'GateType'/0, 'OutType'/0, 'PropType'/0, 'PayWay'/0, 'ShopStatus'/0, 'LoginPrizeType'/0]).

%% message types
-type 'CWxLogin'() :: #'CWxLogin'{}.
-type 'SLogin'() :: #'SLogin'{}.
-type 'CLogin'() :: #'CLogin'{}.
-type 'SLoginOut'() :: #'SLoginOut'{}.
-type 'SWxLogin'() :: #'SWxLogin'{}.
-export_type(['CWxLogin'/0, 'SLogin'/0, 'CLogin'/0, 'SLoginOut'/0, 'SWxLogin'/0]).

-spec encode_msg(#'CWxLogin'{} | #'SLogin'{} | #'CLogin'{} | #'SLoginOut'{} | #'SWxLogin'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'CWxLogin'{} | #'SLogin'{} | #'CLogin'{} | #'SLoginOut'{} | #'SWxLogin'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CWxLogin'{} -> e_msg_CWxLogin(Msg, TrUserData);
      #'SLogin'{} -> e_msg_SLogin(Msg, TrUserData);
      #'CLogin'{} -> e_msg_CLogin(Msg, TrUserData);
      #'SLoginOut'{} -> e_msg_SLoginOut(Msg, TrUserData);
      #'SWxLogin'{} -> e_msg_SWxLogin(Msg, TrUserData)
    end.



e_msg_CWxLogin(Msg, TrUserData) ->
    e_msg_CWxLogin(Msg, <<>>, TrUserData).


e_msg_CWxLogin(#'CWxLogin'{withCredentials = F1,
			   rawData = F2, signature = F3, encryptedData = F4,
			   iv = F5},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false -> e_type_string(TrF5, <<B4/binary, 42>>)
	     end
	   end
    end.

e_msg_SLogin(Msg, TrUserData) ->
    e_msg_SLogin(Msg, <<>>, TrUserData).


e_msg_SLogin(#'SLogin'{userid = F1, error = F2}, Bin,
	     TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'OK' -> B1;
		true -> e_enum_ErrCode(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_CLogin(Msg, TrUserData) ->
    e_msg_CLogin(Msg, <<>>, TrUserData).


e_msg_CLogin(#'CLogin'{signature = F1, timestamp = F2},
	     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int64(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_SLoginOut(Msg, TrUserData) ->
    e_msg_SLoginOut(Msg, <<>>, TrUserData).


e_msg_SLoginOut(#'SLoginOut'{type = F1}, Bin,
		TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'OUT_TYPE0' -> Bin;
		true -> e_enum_OutType(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_SWxLogin(Msg, TrUserData) ->
    e_msg_SWxLogin(Msg, <<>>, TrUserData).


e_msg_SWxLogin(#'SWxLogin'{userid = F1, error = F2},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 'OK' -> B1;
		true -> e_enum_ErrCode(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_enum_ErrCode('OK', Bin) -> <<Bin/binary, 0>>;
e_enum_ErrCode('RegistFailed', Bin) ->
    <<Bin/binary, 1>>;
e_enum_ErrCode('LoginFailed', Bin) -> <<Bin/binary, 2>>;
e_enum_ErrCode('PropNotEnough', Bin) ->
    <<Bin/binary, 3>>;
e_enum_ErrCode('GateUnreachable', Bin) ->
    <<Bin/binary, 4>>;
e_enum_ErrCode('EnergyNotEnough', Bin) ->
    <<Bin/binary, 5>>;
e_enum_ErrCode('CoinNotEnough', Bin) ->
    <<Bin/binary, 6>>;
e_enum_ErrCode('DiamondNotEnough', Bin) ->
    <<Bin/binary, 7>>;
e_enum_ErrCode('AlreadyAward', Bin) ->
    <<Bin/binary, 8>>;
e_enum_ErrCode('AwardFailed', Bin) -> <<Bin/binary, 9>>;
e_enum_ErrCode('OrderFailed', Bin) ->
    <<Bin/binary, 10>>;
e_enum_ErrCode('Failed', Bin) -> <<Bin/binary, 11>>;
e_enum_ErrCode('WSGetFailed', Bin) ->
    <<Bin/binary, 12>>;
e_enum_ErrCode('WSLoginFailed', Bin) ->
    <<Bin/binary, 13>>;
e_enum_ErrCode('SetShopFailed', Bin) ->
    <<Bin/binary, 14>>;
e_enum_ErrCode('SetPropFailed', Bin) ->
    <<Bin/binary, 15>>;
e_enum_ErrCode('SetPrizeFailed', Bin) ->
    <<Bin/binary, 16>>;
e_enum_ErrCode('SetGateFailed', Bin) ->
    <<Bin/binary, 17>>;
e_enum_ErrCode('EnergyEnough', Bin) ->
    <<Bin/binary, 18>>;
e_enum_ErrCode(V, Bin) -> e_varint(V, Bin).

e_enum_OutType('OUT_TYPE0', Bin) -> <<Bin/binary, 0>>;
e_enum_OutType('OUT_TYPE1', Bin) -> <<Bin/binary, 1>>;
e_enum_OutType('OUT_TYPE2', Bin) -> <<Bin/binary, 2>>;
e_enum_OutType(V, Bin) -> e_varint(V, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'CWxLogin' ->
	  try d_msg_CWxLogin(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CWxLogin', {Class, Reason, StackTrace}}}})
	  end;
      'SLogin' ->
	  try d_msg_SLogin(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'SLogin', {Class, Reason, StackTrace}}}})
	  end;
      'CLogin' ->
	  try d_msg_CLogin(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CLogin', {Class, Reason, StackTrace}}}})
	  end;
      'SLoginOut' ->
	  try d_msg_SLoginOut(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'SLoginOut', {Class, Reason, StackTrace}}}})
	  end;
      'SWxLogin' ->
	  try d_msg_SWxLogin(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'SWxLogin', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_CWxLogin(Bin, TrUserData) ->
    dfp_read_field_def_CWxLogin(Bin, 0, 0,
				id(false, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_CWxLogin(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_CWxLogin_withCredentials(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CWxLogin(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_CWxLogin_rawData(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_CWxLogin(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_CWxLogin_signature(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CWxLogin(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_CWxLogin_encryptedData(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_CWxLogin(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_CWxLogin_iv(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_CWxLogin(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #'CWxLogin'{withCredentials = F@_1, rawData = F@_2,
		signature = F@_3, encryptedData = F@_4, iv = F@_5};
dfp_read_field_def_CWxLogin(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_CWxLogin(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_CWxLogin(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CWxLogin(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_CWxLogin(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CWxLogin_withCredentials(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      18 ->
	  d_field_CWxLogin_rawData(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      26 ->
	  d_field_CWxLogin_signature(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      34 ->
	  d_field_CWxLogin_encryptedData(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_CWxLogin_iv(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CWxLogin(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_CWxLogin(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_CWxLogin(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_CWxLogin(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_CWxLogin(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_CWxLogin(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #'CWxLogin'{withCredentials = F@_1, rawData = F@_2,
		signature = F@_3, encryptedData = F@_4, iv = F@_5}.

d_field_CWxLogin_withCredentials(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_CWxLogin_withCredentials(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_CWxLogin_withCredentials(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_CWxLogin(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_CWxLogin_rawData(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_CWxLogin_rawData(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CWxLogin_rawData(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CWxLogin(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_CWxLogin_signature(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_CWxLogin_signature(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CWxLogin_signature(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CWxLogin(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_CWxLogin_encryptedData(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_CWxLogin_encryptedData(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_CWxLogin_encryptedData(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CWxLogin(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_CWxLogin_iv(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_CWxLogin_iv(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_CWxLogin_iv(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CWxLogin(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_CWxLogin(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_CWxLogin(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_CWxLogin(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_CWxLogin(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_CWxLogin(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_CWxLogin(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_CWxLogin(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CWxLogin(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_CWxLogin(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CWxLogin(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_CWxLogin(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_CWxLogin(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_CWxLogin(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_CWxLogin(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

d_msg_SLogin(Bin, TrUserData) ->
    dfp_read_field_def_SLogin(Bin, 0, 0,
			      id(<<>>, TrUserData), id('OK', TrUserData),
			      TrUserData).

dfp_read_field_def_SLogin(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_SLogin_userid(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_SLogin(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_SLogin_error(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_SLogin(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'SLogin'{userid = F@_1, error = F@_2};
dfp_read_field_def_SLogin(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_SLogin(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_SLogin(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SLogin(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_SLogin(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SLogin_userid(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      16 ->
	  d_field_SLogin_error(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SLogin(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_SLogin(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_SLogin(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_SLogin(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_SLogin(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_SLogin(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'SLogin'{userid = F@_1, error = F@_2}.

d_field_SLogin_userid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SLogin_userid(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_SLogin_userid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_SLogin(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_SLogin_error(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SLogin_error(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_SLogin_error(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_ErrCode(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   Res
					 end),
			  Rest},
    dfp_read_field_def_SLogin(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_SLogin(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_SLogin(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_SLogin(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SLogin(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_SLogin(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SLogin(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_SLogin(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SLogin(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_SLogin(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SLogin(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_SLogin(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_SLogin(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_SLogin(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_SLogin(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_msg_CLogin(Bin, TrUserData) ->
    dfp_read_field_def_CLogin(Bin, 0, 0,
			      id(<<>>, TrUserData), id(0, TrUserData),
			      TrUserData).

dfp_read_field_def_CLogin(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_CLogin_signature(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_CLogin(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_CLogin_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_CLogin(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'CLogin'{signature = F@_1, timestamp = F@_2};
dfp_read_field_def_CLogin(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_CLogin(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_CLogin(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CLogin(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_CLogin(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CLogin_signature(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      16 ->
	  d_field_CLogin_timestamp(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CLogin(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_CLogin(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_CLogin(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_CLogin(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_CLogin(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_CLogin(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'CLogin'{signature = F@_1, timestamp = F@_2}.

d_field_CLogin_signature(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CLogin_signature(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_CLogin_signature(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CLogin(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_CLogin_timestamp(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CLogin_timestamp(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_CLogin_timestamp(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_CLogin(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_CLogin(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_CLogin(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_CLogin(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CLogin(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_CLogin(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CLogin(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_CLogin(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CLogin(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_CLogin(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CLogin(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_CLogin(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_CLogin(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_CLogin(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_CLogin(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

d_msg_SLoginOut(Bin, TrUserData) ->
    dfp_read_field_def_SLoginOut(Bin, 0, 0,
				 id('OUT_TYPE0', TrUserData), TrUserData).

dfp_read_field_def_SLoginOut(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, TrUserData) ->
    d_field_SLoginOut_type(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_SLoginOut(<<>>, 0, 0, F@_1, _) ->
    #'SLoginOut'{type = F@_1};
dfp_read_field_def_SLoginOut(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_SLoginOut(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_SLoginOut(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SLoginOut(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_SLoginOut(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SLoginOut_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SLoginOut(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_SLoginOut(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SLoginOut(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_SLoginOut(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_SLoginOut(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SLoginOut(<<>>, 0, 0, F@_1, _) ->
    #'SLoginOut'{type = F@_1}.

d_field_SLoginOut_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_SLoginOut_type(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_SLoginOut_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_OutType(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   Res
					 end),
			  Rest},
    dfp_read_field_def_SLoginOut(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_SLoginOut(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_SLoginOut(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SLoginOut(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_SLoginOut(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_SLoginOut(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SLoginOut(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SLoginOut(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SLoginOut(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_SLoginOut(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SLoginOut(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_SLoginOut(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_SLoginOut(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_SLoginOut(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_SLoginOut(Rest, Z1, Z2, F@_1,
				 TrUserData).

d_msg_SWxLogin(Bin, TrUserData) ->
    dfp_read_field_def_SWxLogin(Bin, 0, 0,
				id(<<>>, TrUserData), id('OK', TrUserData),
				TrUserData).

dfp_read_field_def_SWxLogin(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_SWxLogin_userid(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_SWxLogin(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_SWxLogin_error(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_SWxLogin(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'SWxLogin'{userid = F@_1, error = F@_2};
dfp_read_field_def_SWxLogin(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_SWxLogin(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_SWxLogin(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SWxLogin(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_SWxLogin(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SWxLogin_userid(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_SWxLogin_error(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SWxLogin(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_SWxLogin(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_SWxLogin(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_SWxLogin(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_SWxLogin(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_SWxLogin(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'SWxLogin'{userid = F@_1, error = F@_2}.

d_field_SWxLogin_userid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SWxLogin_userid(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_SWxLogin_userid(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_SWxLogin(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_SWxLogin_error(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SWxLogin_error(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_SWxLogin_error(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_ErrCode(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   Res
					 end),
			  Rest},
    dfp_read_field_def_SWxLogin(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_SWxLogin(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_SWxLogin(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_SWxLogin(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SWxLogin(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_SWxLogin(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SWxLogin(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_SWxLogin(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SWxLogin(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_SWxLogin(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SWxLogin(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_SWxLogin(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_SWxLogin(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_SWxLogin(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_SWxLogin(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_enum_ErrCode(0) -> 'OK';
d_enum_ErrCode(1) -> 'RegistFailed';
d_enum_ErrCode(2) -> 'LoginFailed';
d_enum_ErrCode(3) -> 'PropNotEnough';
d_enum_ErrCode(4) -> 'GateUnreachable';
d_enum_ErrCode(5) -> 'EnergyNotEnough';
d_enum_ErrCode(6) -> 'CoinNotEnough';
d_enum_ErrCode(7) -> 'DiamondNotEnough';
d_enum_ErrCode(8) -> 'AlreadyAward';
d_enum_ErrCode(9) -> 'AwardFailed';
d_enum_ErrCode(10) -> 'OrderFailed';
d_enum_ErrCode(11) -> 'Failed';
d_enum_ErrCode(12) -> 'WSGetFailed';
d_enum_ErrCode(13) -> 'WSLoginFailed';
d_enum_ErrCode(14) -> 'SetShopFailed';
d_enum_ErrCode(15) -> 'SetPropFailed';
d_enum_ErrCode(16) -> 'SetPrizeFailed';
d_enum_ErrCode(17) -> 'SetGateFailed';
d_enum_ErrCode(18) -> 'EnergyEnough';
d_enum_ErrCode(V) -> V.

d_enum_OutType(0) -> 'OUT_TYPE0';
d_enum_OutType(1) -> 'OUT_TYPE1';
d_enum_OutType(2) -> 'OUT_TYPE2';
d_enum_OutType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'CWxLogin'{} ->
	  merge_msg_CWxLogin(Prev, New, TrUserData);
      #'SLogin'{} -> merge_msg_SLogin(Prev, New, TrUserData);
      #'CLogin'{} -> merge_msg_CLogin(Prev, New, TrUserData);
      #'SLoginOut'{} ->
	  merge_msg_SLoginOut(Prev, New, TrUserData);
      #'SWxLogin'{} ->
	  merge_msg_SWxLogin(Prev, New, TrUserData)
    end.

merge_msg_CWxLogin(#'CWxLogin'{withCredentials =
				   PFwithCredentials,
			       rawData = PFrawData, signature = PFsignature,
			       encryptedData = PFencryptedData, iv = PFiv},
		   #'CWxLogin'{withCredentials = NFwithCredentials,
			       rawData = NFrawData, signature = NFsignature,
			       encryptedData = NFencryptedData, iv = NFiv},
		   _) ->
    #'CWxLogin'{withCredentials =
		    if NFwithCredentials =:= undefined -> PFwithCredentials;
		       true -> NFwithCredentials
		    end,
		rawData =
		    if NFrawData =:= undefined -> PFrawData;
		       true -> NFrawData
		    end,
		signature =
		    if NFsignature =:= undefined -> PFsignature;
		       true -> NFsignature
		    end,
		encryptedData =
		    if NFencryptedData =:= undefined -> PFencryptedData;
		       true -> NFencryptedData
		    end,
		iv =
		    if NFiv =:= undefined -> PFiv;
		       true -> NFiv
		    end}.

merge_msg_SLogin(#'SLogin'{userid = PFuserid,
			   error = PFerror},
		 #'SLogin'{userid = NFuserid, error = NFerror}, _) ->
    #'SLogin'{userid =
		  if NFuserid =:= undefined -> PFuserid;
		     true -> NFuserid
		  end,
	      error =
		  if NFerror =:= undefined -> PFerror;
		     true -> NFerror
		  end}.

merge_msg_CLogin(#'CLogin'{signature = PFsignature,
			   timestamp = PFtimestamp},
		 #'CLogin'{signature = NFsignature,
			   timestamp = NFtimestamp},
		 _) ->
    #'CLogin'{signature =
		  if NFsignature =:= undefined -> PFsignature;
		     true -> NFsignature
		  end,
	      timestamp =
		  if NFtimestamp =:= undefined -> PFtimestamp;
		     true -> NFtimestamp
		  end}.

merge_msg_SLoginOut(#'SLoginOut'{type = PFtype},
		    #'SLoginOut'{type = NFtype}, _) ->
    #'SLoginOut'{type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end}.

merge_msg_SWxLogin(#'SWxLogin'{userid = PFuserid,
			       error = PFerror},
		   #'SWxLogin'{userid = NFuserid, error = NFerror}, _) ->
    #'SWxLogin'{userid =
		    if NFuserid =:= undefined -> PFuserid;
		       true -> NFuserid
		    end,
		error =
		    if NFerror =:= undefined -> PFerror;
		       true -> NFerror
		    end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CWxLogin'{} ->
	  v_msg_CWxLogin(Msg, ['CWxLogin'], TrUserData);
      #'SLogin'{} ->
	  v_msg_SLogin(Msg, ['SLogin'], TrUserData);
      #'CLogin'{} ->
	  v_msg_CLogin(Msg, ['CLogin'], TrUserData);
      #'SLoginOut'{} ->
	  v_msg_SLoginOut(Msg, ['SLoginOut'], TrUserData);
      #'SWxLogin'{} ->
	  v_msg_SWxLogin(Msg, ['SWxLogin'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_CWxLogin/3}).
v_msg_CWxLogin(#'CWxLogin'{withCredentials = F1,
			   rawData = F2, signature = F3, encryptedData = F4,
			   iv = F5},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [withCredentials | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [rawData | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [signature | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [encryptedData | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [iv | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_SLogin/3}).
v_msg_SLogin(#'SLogin'{userid = F1, error = F2}, Path,
	     _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_ErrCode(F2, [error | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CLogin/3}).
v_msg_CLogin(#'CLogin'{signature = F1, timestamp = F2},
	     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [signature | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_SLoginOut/3}).
v_msg_SLoginOut(#'SLoginOut'{type = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_OutType(F1, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_SWxLogin/3}).
v_msg_SWxLogin(#'SWxLogin'{userid = F1, error = F2},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_ErrCode(F2, [error | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_enum_ErrCode/2}).
v_enum_ErrCode('OK', _Path) -> ok;
v_enum_ErrCode('RegistFailed', _Path) -> ok;
v_enum_ErrCode('LoginFailed', _Path) -> ok;
v_enum_ErrCode('PropNotEnough', _Path) -> ok;
v_enum_ErrCode('GateUnreachable', _Path) -> ok;
v_enum_ErrCode('EnergyNotEnough', _Path) -> ok;
v_enum_ErrCode('CoinNotEnough', _Path) -> ok;
v_enum_ErrCode('DiamondNotEnough', _Path) -> ok;
v_enum_ErrCode('AlreadyAward', _Path) -> ok;
v_enum_ErrCode('AwardFailed', _Path) -> ok;
v_enum_ErrCode('OrderFailed', _Path) -> ok;
v_enum_ErrCode('Failed', _Path) -> ok;
v_enum_ErrCode('WSGetFailed', _Path) -> ok;
v_enum_ErrCode('WSLoginFailed', _Path) -> ok;
v_enum_ErrCode('SetShopFailed', _Path) -> ok;
v_enum_ErrCode('SetPropFailed', _Path) -> ok;
v_enum_ErrCode('SetPrizeFailed', _Path) -> ok;
v_enum_ErrCode('SetGateFailed', _Path) -> ok;
v_enum_ErrCode('EnergyEnough', _Path) -> ok;
v_enum_ErrCode(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_ErrCode(X, Path) ->
    mk_type_error({invalid_enum, 'ErrCode'}, X, Path).

-dialyzer({nowarn_function,v_enum_OutType/2}).
v_enum_OutType('OUT_TYPE0', _Path) -> ok;
v_enum_OutType('OUT_TYPE1', _Path) -> ok;
v_enum_OutType('OUT_TYPE2', _Path) -> ok;
v_enum_OutType(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_OutType(X, Path) ->
    mk_type_error({invalid_enum, 'OutType'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{enum, 'ErrCode'},
      [{'OK', 0}, {'RegistFailed', 1}, {'LoginFailed', 2},
       {'PropNotEnough', 3}, {'GateUnreachable', 4},
       {'EnergyNotEnough', 5}, {'CoinNotEnough', 6},
       {'DiamondNotEnough', 7}, {'AlreadyAward', 8},
       {'AwardFailed', 9}, {'OrderFailed', 10}, {'Failed', 11},
       {'WSGetFailed', 12}, {'WSLoginFailed', 13},
       {'SetShopFailed', 14}, {'SetPropFailed', 15},
       {'SetPrizeFailed', 16}, {'SetGateFailed', 17},
       {'EnergyEnough', 18}]},
     {{enum, 'LogType'},
      [{'LOG_TYPE0', 0}, {'LOG_TYPE1', 1}, {'LOG_TYPE2', 2},
       {'LOG_TYPE3', 3}, {'LOG_TYPE4', 4}, {'LOG_TYPE5', 5}]},
     {{enum, 'GateType'},
      [{'GATE_TYPE0', 0}, {'GATE_TYPE1', 1},
       {'GATE_TYPE2', 2}]},
     {{enum, 'OutType'},
      [{'OUT_TYPE0', 0}, {'OUT_TYPE1', 1}, {'OUT_TYPE2', 2}]},
     {{enum, 'PropType'},
      [{'PROP_TYPE0', 0}, {'PROP_TYPE1', 1},
       {'PROP_TYPE2', 2}, {'PROP_TYPE3', 3}, {'PROP_TYPE4', 4},
       {'PROP_TYPE5', 5}, {'PROP_TYPE6', 6}, {'PROP_TYPE7', 7},
       {'PROP_TYPE8', 8}, {'PROP_TYPE9', 9},
       {'PROP_TYPE10', 10}, {'PROP_TYPE11', 11},
       {'PROP_TYPE12', 12}, {'PROP_TYPE13', 13},
       {'PROP_TYPE14', 14}]},
     {{enum, 'PayWay'},
      [{'PAY_WAY0', 0}, {'PAY_WAY1', 1}, {'PAY_WAY2', 2}]},
     {{enum, 'ShopStatus'},
      [{'SHOP_STATUS0', 0}, {'SHOP_STATUS1', 1},
       {'SHOP_STATUS2', 2}, {'SHOP_STATUS3', 3},
       {'SHOP_STATUS4', 4}]},
     {{enum, 'LoginPrizeType'},
      [{'LoginPrizeSelect', 0}, {'LoginPrizeDraw', 1}]},
     {{msg, 'CWxLogin'},
      [#field{name = withCredentials, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = rawData, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = signature, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = encryptedData, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = iv, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'SLogin'},
      [#field{name = userid, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = error, fnum = 2, rnum = 3,
	      type = {enum, 'ErrCode'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'CLogin'},
      [#field{name = signature, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'SLoginOut'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'OutType'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'SWxLogin'},
      [#field{name = userid, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = error, fnum = 2, rnum = 3,
	      type = {enum, 'ErrCode'}, occurrence = optional,
	      opts = []}]}].


get_msg_names() ->
    ['CWxLogin', 'SLogin', 'CLogin', 'SLoginOut',
     'SWxLogin'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['CWxLogin', 'SLogin', 'CLogin', 'SLoginOut',
     'SWxLogin'].


get_enum_names() ->
    ['ErrCode', 'LogType', 'GateType', 'OutType',
     'PropType', 'PayWay', 'ShopStatus', 'LoginPrizeType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('CWxLogin') ->
    [#field{name = withCredentials, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = rawData, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = signature, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = encryptedData, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = iv, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('SLogin') ->
    [#field{name = userid, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = error, fnum = 2, rnum = 3,
	    type = {enum, 'ErrCode'}, occurrence = optional,
	    opts = []}];
find_msg_def('CLogin') ->
    [#field{name = signature, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('SLoginOut') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'OutType'}, occurrence = optional,
	    opts = []}];
find_msg_def('SWxLogin') ->
    [#field{name = userid, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = error, fnum = 2, rnum = 3,
	    type = {enum, 'ErrCode'}, occurrence = optional,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('ErrCode') ->
    [{'OK', 0}, {'RegistFailed', 1}, {'LoginFailed', 2},
     {'PropNotEnough', 3}, {'GateUnreachable', 4},
     {'EnergyNotEnough', 5}, {'CoinNotEnough', 6},
     {'DiamondNotEnough', 7}, {'AlreadyAward', 8},
     {'AwardFailed', 9}, {'OrderFailed', 10}, {'Failed', 11},
     {'WSGetFailed', 12}, {'WSLoginFailed', 13},
     {'SetShopFailed', 14}, {'SetPropFailed', 15},
     {'SetPrizeFailed', 16}, {'SetGateFailed', 17},
     {'EnergyEnough', 18}];
find_enum_def('LogType') ->
    [{'LOG_TYPE0', 0}, {'LOG_TYPE1', 1}, {'LOG_TYPE2', 2},
     {'LOG_TYPE3', 3}, {'LOG_TYPE4', 4}, {'LOG_TYPE5', 5}];
find_enum_def('GateType') ->
    [{'GATE_TYPE0', 0}, {'GATE_TYPE1', 1},
     {'GATE_TYPE2', 2}];
find_enum_def('OutType') ->
    [{'OUT_TYPE0', 0}, {'OUT_TYPE1', 1}, {'OUT_TYPE2', 2}];
find_enum_def('PropType') ->
    [{'PROP_TYPE0', 0}, {'PROP_TYPE1', 1},
     {'PROP_TYPE2', 2}, {'PROP_TYPE3', 3}, {'PROP_TYPE4', 4},
     {'PROP_TYPE5', 5}, {'PROP_TYPE6', 6}, {'PROP_TYPE7', 7},
     {'PROP_TYPE8', 8}, {'PROP_TYPE9', 9},
     {'PROP_TYPE10', 10}, {'PROP_TYPE11', 11},
     {'PROP_TYPE12', 12}, {'PROP_TYPE13', 13},
     {'PROP_TYPE14', 14}];
find_enum_def('PayWay') ->
    [{'PAY_WAY0', 0}, {'PAY_WAY1', 1}, {'PAY_WAY2', 2}];
find_enum_def('ShopStatus') ->
    [{'SHOP_STATUS0', 0}, {'SHOP_STATUS1', 1},
     {'SHOP_STATUS2', 2}, {'SHOP_STATUS3', 3},
     {'SHOP_STATUS4', 4}];
find_enum_def('LoginPrizeType') ->
    [{'LoginPrizeSelect', 0}, {'LoginPrizeDraw', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('ErrCode', Value) ->
    enum_symbol_by_value_ErrCode(Value);
enum_symbol_by_value('LogType', Value) ->
    enum_symbol_by_value_LogType(Value);
enum_symbol_by_value('GateType', Value) ->
    enum_symbol_by_value_GateType(Value);
enum_symbol_by_value('OutType', Value) ->
    enum_symbol_by_value_OutType(Value);
enum_symbol_by_value('PropType', Value) ->
    enum_symbol_by_value_PropType(Value);
enum_symbol_by_value('PayWay', Value) ->
    enum_symbol_by_value_PayWay(Value);
enum_symbol_by_value('ShopStatus', Value) ->
    enum_symbol_by_value_ShopStatus(Value);
enum_symbol_by_value('LoginPrizeType', Value) ->
    enum_symbol_by_value_LoginPrizeType(Value).


enum_value_by_symbol('ErrCode', Sym) ->
    enum_value_by_symbol_ErrCode(Sym);
enum_value_by_symbol('LogType', Sym) ->
    enum_value_by_symbol_LogType(Sym);
enum_value_by_symbol('GateType', Sym) ->
    enum_value_by_symbol_GateType(Sym);
enum_value_by_symbol('OutType', Sym) ->
    enum_value_by_symbol_OutType(Sym);
enum_value_by_symbol('PropType', Sym) ->
    enum_value_by_symbol_PropType(Sym);
enum_value_by_symbol('PayWay', Sym) ->
    enum_value_by_symbol_PayWay(Sym);
enum_value_by_symbol('ShopStatus', Sym) ->
    enum_value_by_symbol_ShopStatus(Sym);
enum_value_by_symbol('LoginPrizeType', Sym) ->
    enum_value_by_symbol_LoginPrizeType(Sym).


enum_symbol_by_value_ErrCode(0) -> 'OK';
enum_symbol_by_value_ErrCode(1) -> 'RegistFailed';
enum_symbol_by_value_ErrCode(2) -> 'LoginFailed';
enum_symbol_by_value_ErrCode(3) -> 'PropNotEnough';
enum_symbol_by_value_ErrCode(4) -> 'GateUnreachable';
enum_symbol_by_value_ErrCode(5) -> 'EnergyNotEnough';
enum_symbol_by_value_ErrCode(6) -> 'CoinNotEnough';
enum_symbol_by_value_ErrCode(7) -> 'DiamondNotEnough';
enum_symbol_by_value_ErrCode(8) -> 'AlreadyAward';
enum_symbol_by_value_ErrCode(9) -> 'AwardFailed';
enum_symbol_by_value_ErrCode(10) -> 'OrderFailed';
enum_symbol_by_value_ErrCode(11) -> 'Failed';
enum_symbol_by_value_ErrCode(12) -> 'WSGetFailed';
enum_symbol_by_value_ErrCode(13) -> 'WSLoginFailed';
enum_symbol_by_value_ErrCode(14) -> 'SetShopFailed';
enum_symbol_by_value_ErrCode(15) -> 'SetPropFailed';
enum_symbol_by_value_ErrCode(16) -> 'SetPrizeFailed';
enum_symbol_by_value_ErrCode(17) -> 'SetGateFailed';
enum_symbol_by_value_ErrCode(18) -> 'EnergyEnough'.


enum_value_by_symbol_ErrCode('OK') -> 0;
enum_value_by_symbol_ErrCode('RegistFailed') -> 1;
enum_value_by_symbol_ErrCode('LoginFailed') -> 2;
enum_value_by_symbol_ErrCode('PropNotEnough') -> 3;
enum_value_by_symbol_ErrCode('GateUnreachable') -> 4;
enum_value_by_symbol_ErrCode('EnergyNotEnough') -> 5;
enum_value_by_symbol_ErrCode('CoinNotEnough') -> 6;
enum_value_by_symbol_ErrCode('DiamondNotEnough') -> 7;
enum_value_by_symbol_ErrCode('AlreadyAward') -> 8;
enum_value_by_symbol_ErrCode('AwardFailed') -> 9;
enum_value_by_symbol_ErrCode('OrderFailed') -> 10;
enum_value_by_symbol_ErrCode('Failed') -> 11;
enum_value_by_symbol_ErrCode('WSGetFailed') -> 12;
enum_value_by_symbol_ErrCode('WSLoginFailed') -> 13;
enum_value_by_symbol_ErrCode('SetShopFailed') -> 14;
enum_value_by_symbol_ErrCode('SetPropFailed') -> 15;
enum_value_by_symbol_ErrCode('SetPrizeFailed') -> 16;
enum_value_by_symbol_ErrCode('SetGateFailed') -> 17;
enum_value_by_symbol_ErrCode('EnergyEnough') -> 18.

enum_symbol_by_value_LogType(0) -> 'LOG_TYPE0';
enum_symbol_by_value_LogType(1) -> 'LOG_TYPE1';
enum_symbol_by_value_LogType(2) -> 'LOG_TYPE2';
enum_symbol_by_value_LogType(3) -> 'LOG_TYPE3';
enum_symbol_by_value_LogType(4) -> 'LOG_TYPE4';
enum_symbol_by_value_LogType(5) -> 'LOG_TYPE5'.


enum_value_by_symbol_LogType('LOG_TYPE0') -> 0;
enum_value_by_symbol_LogType('LOG_TYPE1') -> 1;
enum_value_by_symbol_LogType('LOG_TYPE2') -> 2;
enum_value_by_symbol_LogType('LOG_TYPE3') -> 3;
enum_value_by_symbol_LogType('LOG_TYPE4') -> 4;
enum_value_by_symbol_LogType('LOG_TYPE5') -> 5.

enum_symbol_by_value_GateType(0) -> 'GATE_TYPE0';
enum_symbol_by_value_GateType(1) -> 'GATE_TYPE1';
enum_symbol_by_value_GateType(2) -> 'GATE_TYPE2'.


enum_value_by_symbol_GateType('GATE_TYPE0') -> 0;
enum_value_by_symbol_GateType('GATE_TYPE1') -> 1;
enum_value_by_symbol_GateType('GATE_TYPE2') -> 2.

enum_symbol_by_value_OutType(0) -> 'OUT_TYPE0';
enum_symbol_by_value_OutType(1) -> 'OUT_TYPE1';
enum_symbol_by_value_OutType(2) -> 'OUT_TYPE2'.


enum_value_by_symbol_OutType('OUT_TYPE0') -> 0;
enum_value_by_symbol_OutType('OUT_TYPE1') -> 1;
enum_value_by_symbol_OutType('OUT_TYPE2') -> 2.

enum_symbol_by_value_PropType(0) -> 'PROP_TYPE0';
enum_symbol_by_value_PropType(1) -> 'PROP_TYPE1';
enum_symbol_by_value_PropType(2) -> 'PROP_TYPE2';
enum_symbol_by_value_PropType(3) -> 'PROP_TYPE3';
enum_symbol_by_value_PropType(4) -> 'PROP_TYPE4';
enum_symbol_by_value_PropType(5) -> 'PROP_TYPE5';
enum_symbol_by_value_PropType(6) -> 'PROP_TYPE6';
enum_symbol_by_value_PropType(7) -> 'PROP_TYPE7';
enum_symbol_by_value_PropType(8) -> 'PROP_TYPE8';
enum_symbol_by_value_PropType(9) -> 'PROP_TYPE9';
enum_symbol_by_value_PropType(10) -> 'PROP_TYPE10';
enum_symbol_by_value_PropType(11) -> 'PROP_TYPE11';
enum_symbol_by_value_PropType(12) -> 'PROP_TYPE12';
enum_symbol_by_value_PropType(13) -> 'PROP_TYPE13';
enum_symbol_by_value_PropType(14) -> 'PROP_TYPE14'.


enum_value_by_symbol_PropType('PROP_TYPE0') -> 0;
enum_value_by_symbol_PropType('PROP_TYPE1') -> 1;
enum_value_by_symbol_PropType('PROP_TYPE2') -> 2;
enum_value_by_symbol_PropType('PROP_TYPE3') -> 3;
enum_value_by_symbol_PropType('PROP_TYPE4') -> 4;
enum_value_by_symbol_PropType('PROP_TYPE5') -> 5;
enum_value_by_symbol_PropType('PROP_TYPE6') -> 6;
enum_value_by_symbol_PropType('PROP_TYPE7') -> 7;
enum_value_by_symbol_PropType('PROP_TYPE8') -> 8;
enum_value_by_symbol_PropType('PROP_TYPE9') -> 9;
enum_value_by_symbol_PropType('PROP_TYPE10') -> 10;
enum_value_by_symbol_PropType('PROP_TYPE11') -> 11;
enum_value_by_symbol_PropType('PROP_TYPE12') -> 12;
enum_value_by_symbol_PropType('PROP_TYPE13') -> 13;
enum_value_by_symbol_PropType('PROP_TYPE14') -> 14.

enum_symbol_by_value_PayWay(0) -> 'PAY_WAY0';
enum_symbol_by_value_PayWay(1) -> 'PAY_WAY1';
enum_symbol_by_value_PayWay(2) -> 'PAY_WAY2'.


enum_value_by_symbol_PayWay('PAY_WAY0') -> 0;
enum_value_by_symbol_PayWay('PAY_WAY1') -> 1;
enum_value_by_symbol_PayWay('PAY_WAY2') -> 2.

enum_symbol_by_value_ShopStatus(0) -> 'SHOP_STATUS0';
enum_symbol_by_value_ShopStatus(1) -> 'SHOP_STATUS1';
enum_symbol_by_value_ShopStatus(2) -> 'SHOP_STATUS2';
enum_symbol_by_value_ShopStatus(3) -> 'SHOP_STATUS3';
enum_symbol_by_value_ShopStatus(4) -> 'SHOP_STATUS4'.


enum_value_by_symbol_ShopStatus('SHOP_STATUS0') -> 0;
enum_value_by_symbol_ShopStatus('SHOP_STATUS1') -> 1;
enum_value_by_symbol_ShopStatus('SHOP_STATUS2') -> 2;
enum_value_by_symbol_ShopStatus('SHOP_STATUS3') -> 3;
enum_value_by_symbol_ShopStatus('SHOP_STATUS4') -> 4.

enum_symbol_by_value_LoginPrizeType(0) ->
    'LoginPrizeSelect';
enum_symbol_by_value_LoginPrizeType(1) ->
    'LoginPrizeDraw'.


enum_value_by_symbol_LoginPrizeType('LoginPrizeSelect') ->
    0;
enum_value_by_symbol_LoginPrizeType('LoginPrizeDraw') ->
    1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> pb.



gpb_version_as_string() ->
    "4.1.3".

gpb_version_as_list() ->
    [4,1,3].
